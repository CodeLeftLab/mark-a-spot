<?php

/**
 * This module logs and shows logging of node (reports) actions.
 * toDo ... convert to entity-api? http://drupal.org/node/1026420 
 *
 * @author Holger Kreis - holger@markaspot.org
 */





// function markaspot_log_entity_info(){
//   $markaspot_log_info['maslog'] = array(
//     'label' => t('Mark-a-Spot Activity Logging'),
//     'controller class' => 'MasLogController',
//     'base table' => 'markaspot_log',
//     // view
//     'uri callback' => 'markaspot_log_uri',
//     'fieldable' => TRUE,
//     'entity keys' => array(
//       'id' => 'id',
//     ),
//     'static cache' => TRUE,
//     'bundles' => array(
//       'markaspot_log'=> array(
//         'label' => 'Mas_log',
//         'admin' => array(
//           'path' => 'admin/structure/maslog/manage',
//           'access arguments' => array('administer Activity Logs'),
//         ),
//       ),
//     ),
//     'view modes' => array(
//       'full' => array(
//         'label' => t('Full MasLog'),
//         'custom settings' =>  FALSE,
//       ),
//     )
//   );
  
//   return $markaspot_log_info;
// }

function markaspot_log_menu(){
  $items['admin/structure/maslog/manage'] = array(
    'title' => 'Mark-a-Spot  Log Admin',
    'description' => 'Manage Log',
    'page callback' => 'markaspot_log_info',
    'access arguments' => array('administer maslogs'),
  );
  $items['maslog/%maslog'] = array(
    'title callback' => 'markaspot_log_page_title',
    'title arguments' => array(1),
    'page callback' => 'markaspot_log_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view maslogs'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function markaspot_log_permission(){
    return array(
    'administer maslogs' =>  array(
      'title' => t('Administer Mark-a-Spot Logs'),
      'restrict access' => TRUE,
    ),
    'view maslogs' => array(
      'title' => t('View Mark-a-Spot Logs'),
    )
  );
}


function markaspot_log_info() {
  return ('Welcome to the administration page for your Mark-a-Spot Logs!');
}

function markaspot_log_page_title($maslog){
  return $maslog->id;
}

function markaspot_log_page_view($maslog, $view_mode = 'full'){
  $maslog->content = array();

  // Build fields content.
  field_attach_prepare_view('maslog', array($maslog->id => $maslog), $view_mode);
  entity_prepare_view('maslog', array($maslog->id => $maslog));
  $maslog->content += field_attach_view('maslog', $maslog, $view_mode);

  return $maslog->content;
}


function markaspot_log_field_extra_fields() {
  $return = array();
  $return['maslog']['maslog'] = array(
    'form' => array(
      'note' => array(
        'label' => t('Note'),
        'description' => t('Mark-a-Spot Note'),
      ),
    ),
  );

  return $return;
}














/**
 * Implements hook_block_info().
 *
 * 
 */
 
function markaspot_log_block_info() {
  $blocks['markaspot_activity'] = array(
      'info' => t('Mark-a-Spot: Show Activity for a report'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.http://drupal.org/node/1104498
 */
function markaspot_log_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'markaspot_activity':
      $block['subject'] = t('MaS Activity Log');
    
      if (user_access('access_content')) {
        if(arg(0) == 'node' && is_numeric(arg(1))) {
          $result = markaspot_log_get_log(arg(1));
          // $tax =  taxonomy_node_get_terms(arg(1));
          // print_r($tax);
        } else {
          return NULL;
        }
        
        $items = array();
        
        foreach ($result as $log) {
          $items[] = array(
            'data' => '<span class="log-entry">'.$log->message.' </span><br/>'.t('<span class="meta-info">@time ago</span>', array('@time' => format_interval(REQUEST_TIME - $log->modified))));
        }
        if (empty($items)) { //No content in the last week.
          $block['content'] = t('No log available.'); 
        }
        else {
          //Pass data through theme function.
          $block['content'] = theme('item_list', array(
          'items' => $items));
        }
      }
    break;
  }
  return $block;
}



/**
 * Creates Log entry according to role.
 *
 * @param obj $node
 * @return void
 */
function markaspot_log_node_presave($node) {

  // Preparing Logging to Mas_log table (don't think of watchdog)
  global $user;

/*
  if (!in_array('Bürger', $user->roles) && 
    !(in_array('Verwaltung', $user->roles) || in_array('administrator', $user->roles))){
    markaspot_log_add_role_to_user('Bürger', $user->uid);
    $data->message = t('The User is now Bürger');
  }
*/

  if (!in_array('Verwaltung', $user->roles) || in_array('administrator', $user->roles) && $node->type == 'report'){

    if($node->nid) {
      $data->message = t('The report has been edited by Citizen');
    } else {
      $data->message = t('The report has been created by Citizen');
    }
  }
  
  if (in_array('administrator', $user->roles) || 
    in_array('Verwaltung', $user->roles) && $node->type == 'report'){  

    if($node->nid) {
      $data->message = t('The report has been edited by Administration');
    } else {
      $data->message = t('The report has been created');    
    }
  }

  unset($data->nid);
  
  $data->uid = $user->uid;
  $data->nid = $node->nid;

  $data->created = time();
  $data->modified = time();
  markaspot_log_write_log($data);
}


function markaspot_log_comment_presave($comment) {

  // Preparing Logging to Mas_log table (don't think of watchdog)
  global $user;

  /*
  if (!in_array('Bürger', $user->roles) && 
    !(in_array('Verwaltung', $user->roles) || in_array('administrator', $user->roles))){
    markaspot_log_add_role_to_user('Bürger', $user->uid);
    $data->message = t('The User is now Bürger');
  }
  */

  //print_r($user->roles);
  if (in_array('Bürger', $user->roles) || in_array('anonymous user',$user->roles)){
    $data->message = t('A comment has been created by Citizen');
  }

  
  if (in_array('administrator', $user->roles) || 
    in_array('Verwaltung', $user->roles) && $node->type == 'report'){
      $data->message = t('A comment has been created by Adminstration');
  }

  unset($data->nid);
  
  $data->uid = $user->uid;
  $data->nid = $comment->nid;

  $data->created = time();
  $data->modified = time();
  /*
print_r($data);
  die;
*/
  
/*   Array ( [2] => authenticated user [3] => administrator ) stdClass Object ( [message] => A Comment has been created by Adminstration [uid] => 1 [nid] => 185 [created] => 1325696052 [modified] => 1325696052 ) */
  
  markaspot_log_write_log($data);
}


/*
 * Adds user to Citizen Role
 *
 * @param string $role_name
 * @param int $uid
 * @return void
 */
function markaspot_log_add_role_to_user($role_name, $uid)  {
  $results = db_select('users_roles', 'ur')
    ->fields('ur', array('rid'))
    ->condition('ur.uid', $uid)
    ->execute();
  
  $_add_to_user = TRUE;
  if ($results->rowCount() > 0)  {
    // check to see if the user already has this role assigned to them
    foreach ($results as $rid)  {
      $name = user_role_load($rid->rid)->name;
      if ($name == $role_name) {
        $_add_to_user = FALSE;
      }
    }
  }
  
  if ($_add_to_user)  {
    $rid = user_role_load_by_name($role_name)->rid;
    // var_dump(user_role_load_by_name($role_name));
    $insert = db_insert('users_roles')
      ->fields(array(
        'uid' => $uid,
        'rid' => $rid,
      ))
      ->execute();
  }
}



/*
 * Gets log-entries object by nid.
 *
 * @param int $nid
 * @return object
 */
function markaspot_log_get_log($nid) {
  $result = db_query('SELECT * FROM {markaspot_log} WHERE nid='.$nid);
  return $result;
}

/**
 * Writes a log entry to the database
 *
 * @param object $entry
 * @return void
 */
function markaspot_log_write_log($data) {
  //$primary_key = !empty($data->id) ? array('id') : id;
  drupal_write_record('markaspot_log', $data);
}

/**
 * Deletes a note from the database.
 *
 * @param int $id
 * @return void
 */
function markaspot_log_delete_log($id) {
  db_query("DELETE FROM {markaspot_log} WHERE id=%d", array(
    ':id' => $id,
  ));
}
